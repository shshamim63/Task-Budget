// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  USER
  ADMIN
  SUPER
}

model User {
  id Int @default(autoincrement()) @id
  email String @unique
  username String @unique
  password_hash String
  userType UserType @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks Task[]
  expenses Expense[]
  contributingTask UserTasks[]
  companionOf Associate[]
}

model Enterprise {
  id Int @default(autoincrement()) @id
  name String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  associates Associate[]
  tasks Task[]
}

model Department {
  id Int @default(autoincrement()) @id
  name String @unique
  assiciates Associate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Designation {
  id Int @default(autoincrement()) @id
  name String @unique
  assiciates Associate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Associate {
  id Int @default(autoincrement()) @id
  department Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  designation Designation @relation(fields: [designationId], references: [id])
  designationId Int
  enterprise Enterprise @relation(fields: [enterpriseId], references: [id])
  enterpriseId Int
  affiliate User @relation(fields: [affiliateId], references: [id])
  affiliateId Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([enterpriseId, affiliateId])
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  DONE
}

model Task {
  id Int @default(autoincrement()) @id
  title String @unique
  description String?
  creator User @relation(fields: [creatorId], references: [id])
  creatorId Int
  status TaskStatus @default(OPEN)
  budget Decimal @default(0.0) @db.Decimal(10,2)
  expenses Expense[]
  members UserTasks[]
  enterprise Enterprise @relation(fields: [enterpriseId], references: [id])
  enterpriseId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserTasks {
  member User @relation(fields: [memberId], references: [id])
  memberId Int
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@id([memberId, taskId])
}

model Expense {
  id Int @default(autoincrement()) @id
  description String
  amount Decimal @db.Decimal(10,2)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId Int
  contributor User @relation(fields: [contributorId], references: [id])
  contributorId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}